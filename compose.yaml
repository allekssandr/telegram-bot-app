version: "3.8"
name: tg-bot-docker
services:

  db:
    image: postgres:14
    restart: always
    container_name: postgres-container
    shm_size: 128mb
    env_file:
      - ./.env
    environment:
      POSTGRES_DB: ${POSTGRES_DATABASE}
      POSTGRES_USER: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_LISTEN_ADDRESSES: '*'
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - 5433:5432
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
#      - ./dump.sql:/docker-entrypoint-initdb.d/dump.sql
    networks:
      - my_network

  tg-bot-app:
    container_name: tg-bot-app-container
    build:
      context: ./bot_app
    ports:
      - 3001:3001
    env_file:
      - ./.env
    environment:
      BOT_TOKEN: ${BOT_TOKEN}
      POSTGRES_DATABASE: ${POSTGRES_DATABASE}
      POSTGRES_USERNAME: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DIALECT: ${POSTGRES_DIALECT}
      PROVIDER_TOKEN: ${PROVIDER_TOKEN}
      PROVIDER_TOKEN_TEST: ${PROVIDER_TOKEN_TEST}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - my_network

networks:
  my_network:
      driver: bridge